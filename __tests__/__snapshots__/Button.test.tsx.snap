// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button should render the Button component with the default props 1`] = `
{
  "asFragment": [Function],
  "baseElement": .c0 {
  display: inline-grid;
  grid-gap: calc(((7 / 16) * 1rem) + (9.335 - 7) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  grid-auto-flow: column;
  justify-items: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-transition: 200ms background-color ease-out;
  transition: 200ms background-color ease-out;
  cursor: pointer;
  border-radius: calc(((7 / 16) * 1rem) + (9.335 - 7) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  white-space: nowrap;
  -webkit-text-decoration: none;
  text-decoration: none;
  margin: 0;
  font-size: clamp(0.88rem,calc(0.83rem + 0.21vw),1.17rem);
  font-weight: 700;
  font-family: 'GT-America Standard Bold',sans-serif;
  vertical-align: middle;
  color: #1A1A1A;
  padding: calc(((10.5 / 16) * 1rem) + (14.002500000000001 - 10.5) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320))) calc(((14 / 16) * 1rem) + (18.67 - 14) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  background: #F15A28;
  border: 1px solid transparent;
}

.c0 svg {
  height: calc(((10.5 / 16) * 1rem) + (14.002500000000001 - 10.5) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  width: calc(((14 / 16) * 1rem) + (18.67 - 14) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
}

.c0:hover {
  background: #F26B3E;
  border: 1px solid transparent;
}

.c0:active {
  background: #F15A28;
  color: #FFFFFF;
}

<body>
    <div>
      <button
        class="c0"
      >
        I am a button
      </button>
    </div>
  </body>,
  "container": .c0 {
  display: inline-grid;
  grid-gap: calc(((7 / 16) * 1rem) + (9.335 - 7) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  grid-auto-flow: column;
  justify-items: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-transition: 200ms background-color ease-out;
  transition: 200ms background-color ease-out;
  cursor: pointer;
  border-radius: calc(((7 / 16) * 1rem) + (9.335 - 7) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  white-space: nowrap;
  -webkit-text-decoration: none;
  text-decoration: none;
  margin: 0;
  font-size: clamp(0.88rem,calc(0.83rem + 0.21vw),1.17rem);
  font-weight: 700;
  font-family: 'GT-America Standard Bold',sans-serif;
  vertical-align: middle;
  color: #1A1A1A;
  padding: calc(((10.5 / 16) * 1rem) + (14.002500000000001 - 10.5) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320))) calc(((14 / 16) * 1rem) + (18.67 - 14) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  background: #F15A28;
  border: 1px solid transparent;
}

.c0 svg {
  height: calc(((10.5 / 16) * 1rem) + (14.002500000000001 - 10.5) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
  width: calc(((14 / 16) * 1rem) + (18.67 - 14) * calc((min(100vw,2560px) - 320 / 16 * 1rem) / (2560 - 320)));
}

.c0:hover {
  background: #F26B3E;
  border: 1px solid transparent;
}

.c0:active {
  background: #F15A28;
  color: #FFFFFF;
}

<div>
    <button
      class="c0"
    >
      I am a button
    </button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
